import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchCount } from '../../api';

const initialState = {
  value: 0,
  status: 'idle',
};

//A função abaixo é chamada de conversão e nos permite executar lógica assíncrona. Ele pode ser despachado como uma ação regular: 
//`dispatch(incrementAsync(10))`. Isso chamará o thunk com a função `dispatch` como o primeiro argumento. 
//O código assíncrono pode então ser executado e outras ações podem ser despachadas. 
//Thunks são normalmente usados para fazer solicitações assíncronas.

export const incrementAsync = createAsyncThunk(
  'counter/fetchCount',
  async (amount) => {
    const response = await fetchCount(amount);
    // O valor que retornamos torna-se o payload da ação `fulfilled`
    return response.data;
  }
);

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  // O `reducers` campo nos permite definir reducers e gerar ações associadas
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
      builder
        .addCase(incrementAsync.pending, (state) => {
          state.status = 'loading';
        })
        .addCase(incrementAsync.fulfilled, (state, action) => {
          state.status = 'idle';
          state.value += action.payload;
        });
    },
});

export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};

export default counterSlice.reducer;
